import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program that converts an XML (RSS version 2.0) feed from a URL and into an
 * HTML output file, and create an index of multiple HTMLs.
 *
 * @author Ibrahim Mohamed
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title<title/>
     * <head/> <body/>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1"/>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * utilizing getChild to retrieve the title, description, and link tags
         * and declaring variables for title text and description
         */
        String titleBody = "";
        String descriptionBody = "";
        int description = getChildElement(channel, "description");
        int title = getChildElement(channel, "title");
        int link = getChildElement(channel, "link");

        // if the title tag has child nodes, print its text
        if (channel.child(title).numberOfChildren() > 0) {
            titleBody = channel.child(title).child(0).label();
        } else {
            // if it doesn't have children, print "Empty title"
            titleBody = "Empty Title";
        }

        // if the description tag has child nodes, print its text
        if (channel.child(description).numberOfChildren() > 0) {
            descriptionBody = channel.child(description).child(0).label();

            // else, print "No description"
        } else {
            descriptionBody = "No description";

        }

        // printing the full table
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + titleBody + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + channel.child(link).child(0).label()
                + "\">" + titleBody + "</a></h1>");
        out.println("<p>" + descriptionBody + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <table/>
     * <body/> <html/>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // printing the closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // declaring the limit (end) value and a counter
        int limit = -1;
        int i = 0;

        // setting a while loop to determine the index of the first tag
        while (xml.numberOfChildren() > i && limit < 0) {
            if (xml.child(i).label().equals(tag)) {
                limit = i;
            }
            i++;
        }
        return limit; //if found, it returns the first occurrence. or -1 if its not

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //utilizing getChild to retrieve the children
        int title = getChildElement(item, "title");
        int description = getChildElement(item, "description");
        int pubDate = getChildElement(item, "pubDate");
        int link = getChildElement(item, "link");
        int source = getChildElement(item, "source");

        out.println("<tr>");
        String pubDateBody = "No date available";

        // if a date is present, initialize it to pubBody
        if (pubDate != -1) {
            pubDateBody = item.child(pubDate).child(0).label();
            out.println("<td>" + pubDateBody + "</td>");

        } else {
            out.println("<td>" + pubDateBody + "</td>");
        }

        String sourceBody = "No source available";
        String sourceUrl = "";
        // if a source is present, initialize it to sourceBody and its url to sourceUrl
        if (source != -1) {
            if (item.child(source).numberOfChildren() == 1) {
                sourceBody = item.child(source).child(0).label();
                sourceUrl = item.child(source).attributeValue("url");
            }

            out.println("<td><a href=\"" + sourceUrl + "\">" + sourceBody
                    + "</td>");

        } else {
            out.println("<td>" + sourceBody + "</td>");
        }

        // initialize string for title body (text)
        String titleBody = "";

        //if a description is present, initialize it to the news
        if (title != -1 && item.child(title).numberOfChildren() > 0) {
            titleBody = item.child(title).child(0).label();
        } else if (description != -1
                && item.child(description).numberOfChildren() > 0) {
            titleBody = item.child(description).child(0).label();
        } else {
            titleBody = "No title available";
        }

        // fetching the link info
        String fetchLink = "";
        if (link != -1) {
            fetchLink = item.child(link).child(0).label();
        }
        // printing the link text
        out.println("<td><a href=\"" + fetchLink + "\">" + titleBody + "</td>");

        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        // Reading XML input and creating an XMLTree.
        XMLTree xml = new XMLTree1(url);

        // determining if an RSS feed exists and is the correct version (2.0)
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            //Retrieving the <channel> element
            XMLTree channel = xml.child(0);
            SimpleWriter outFile = new SimpleWriter1L(file);

            // printing the channel header
            outputHeader(channel, outFile);

            // locating and processing item tag (if present)
            for (int k = 0; k < channel.numberOfChildren(); k++) {
                if (channel.child(k).isTag()
                        && channel.child(k).label().equals("item")) {
                    processItem(channel.child(k), outFile);
                }
            }
            outputFooter(outFile);
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // taking user input for XML file
        out.print("Please enter an XML file: ");
        String newFile = in.nextLine();

        // Reading XML input to create an XMLTree.
        XMLTree xml = new XMLTree1(newFile);

        // create an output file for total html
        SimpleWriter outFile = new SimpleWriter1L("results.html");

        // printing the table containing the html, header and title
        outFile.println("<html>");
        outFile.println("<head>");
        outFile.print(
                "<title>" + xml.attributeValue("title") + "</title> </head> ");

        // printing the body
        outFile.println("<body>");
        outFile.println("<h2>" + xml.attributeValue("title") + "</h2>");
        outFile.println("<ul>");

        // setting a for loop to store url, files, and names
        for (int k = 0; k < xml.numberOfChildren(); k++) {
            String urlNew = xml.child(k).attributeValue("url");
            String newFile2 = xml.child(k).attributeValue("file");
            String name = xml.child(k).attributeValue("name");

            outFile.println(
                    "<li><a href=\"" + newFile2 + "\">" + name + "</a> </li>");

            //calling the processFeed method
            processFeed(urlNew, newFile2, out);
        }
        outFile.println("</ul>");
        outFile.println("</body>");
        outFile.println("</html>");

        // closing input and output streams
        outFile.close();
        in.close();
        out.close();
    }

}
